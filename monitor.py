import time
import subprocess
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import sys
class MonitorEventHandling(FileSystemEventHandler):
    def on_created(self, event):
        print(event.src_path, event.event_type)

def driveMonitoring():
    event_handler = MonitorEventHandling()
    # Create Observer to watch directories
    observer = Observer()

    # Take in list of paths. If none given, watch CWD
    paths = sys.argv[1:]
    print(paths)
    # Empty list of observers
    observers = []

    # Iterate through paths and attach observers
    for line in paths:

        # Convert line into string and strip newline character
        targetPath = str(line).rstrip()

        # Schedules watching of a given path
        observer.schedule(event_handler, targetPath)

        # Add observable to list of observers
        observers.append(observer)

    # Start observer
    observer.start()

    try:
        while True:

            # Poll every second
            time.sleep(1)

    except KeyboardInterrupt:
        for o in observers:
            o.unschedule_all()

            # Stop observer if interrupted
            o.stop()

    for o in observers:

        # Wait until the thread terminates before exit
        o.join()

if __name__ == '__main__':
    driveMonitoring()

# import logging
# import sys
# import time
# from watchdog.observers import Observer
# from watchdog.events import LoggingEventHandler

# # Attach a logging event AKA FileSystemEventHandler
# event_handler = LoggingEventHandler()

# # Create Observer to watch directories
# observer = Observer()

# # Take in list of paths. If none given, watch CWD
# paths = sys.argv[1:]
# print(paths)
# # Empty list of observers
# observers = []

# # Base logging configuration
# logging.basicConfig(level=logging.INFO,
#                     format='%(asctime)s - %(message)s',
#                     datefmt='%Y-%m-%d %H:%M:%S')

# # Iterate through paths and attach observers
# for line in paths:

#     # Convert line into string and strip newline character
#     targetPath = str(line).rstrip()

#     # Schedules watching of a given path
#     observer.schedule(event_handler, targetPath)

#     # Add observable to list of observers
#     observers.append(observer)

# # Start observer
# observer.start()

# try:
#     while True:

#         # Poll every second
#         time.sleep(1)

# except KeyboardInterrupt:
#     for o in observers:
#         o.unschedule_all()

#         # Stop observer if interrupted
#         o.stop()

# for o in observers:

#     # Wait until the thread terminates before exit
#     o.join()